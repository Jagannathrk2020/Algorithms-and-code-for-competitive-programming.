#include <bits/stdc++.h>

#define UNMATCHED -1
#define MAX 500000
#define vi vector<int>
#define A 1
#define B 0

using namespace std;

int size1, size2, n;
vi graph[MAX];
int matched[MAX];
bool visited[MAX];

struct vertex {
  int type;
  int id;
	vertex(int type = A, int id = 0){
		this->type = type;
		this->id = id;
	}
};

int vertex_to_id(vertex v) {
  return ((v.type == A) ? 0 : size1) + v.id;
}

vertex id_to_vertex(int id) {
  vertex ret;
  if(id < size1) ret = vertex(A,id);
  else ret = vertex(B,id - size1);
  return ret;
}

bool augment_path(int id) {

  visited[id] = true;

  for(int i = 0; i < graph[id].size(); i++) {
	int neigh = graph[id][i];
	if(visited[neigh]) continue;

    if(matched[neigh] == UNMATCHED) {
		matched[id] = neigh; matched[neigh] = id;
		return true;
    } 
	else if(matched[neigh] != id) {
		visited[neigh] = true;
		if (augment_path(matched[neigh])) {
			matched[id] = neigh; matched[neigh] = id;
			return true;
		}
    }
  }

  return false;
}

int main() {

	while(scanf("%d",&n) != EOF){
	
		fill(matched, matched + MAX, UNMATCHED);
 		
		int c[n][n];
		int row[n][n];
		int col[n][n];
		int id;
		
		for(int i = 0; i < n; i++)
			for(int j = 0; j < n; j++)
				scanf("\n%c",&c[i][j]);

		id = 1;
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(c[i][j] != )
					row[i][j] = id;
				else id++;
			}
			id++;
		}
		
		id = 1;
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(c[j][i] == '.')
					col[j][i] = id;
				else id++;
			}
			id++;
		}
		
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(c[i][j] == '.')
					printf("%d ",col[i][j]);
				else
					printf("X ");
			}
			printf("\n");
		}
		
		for(int i = 0; i < n; i++){
			for(int j = 0; j < n; j++){
				if(c[i][j] == '.')
					printf("%d ",row[i][j]);
				else
					printf("X ");
			}
			printf("\n");
		}
		
	}
/*
  int answer = 0;
  for(int i = 0; i < size1; i++) {
    if(matched[i] == UNMATCHED) {
      fill(visited, visited + MAX, false);
      if(augment_path(i)) answer++;
    }
  }

  printf("Size of maximum matching: %d\n", answer);
  for (int i = 0; i < size1; i++) {
    if (matched[i] != UNMATCHED) {
      vertex matched1 = id_to_vertex(i);
      vertex matched2 = id_to_vertex(matched[i]);
      printf("A%d B%d\n", matched1.id, matched2.id);
    }
  }
*/
  return 0;
}
