/*
6
5
7 -1 
-1 7 5
-1 5 -1 -1
-1 -1 7 -1 -1
4
5
7 -1
-1 7 5

8
1
1 1 
1 1 1
1 1 1 1
1 1 1 1 1
1 1 1 1 1 1
1 1 1 1 1 1 1

28
-1
-1 -1
-1 -1 -1
-1 -1 -1 -1
2 -1 -1 -1 1
-1 -1 -1 -1 2 -1
-1 -1 1 -1 -1 -1 2
-1 1 -1 -1 2 -1 2 -1
-1 -1 -1 2 -1 -1 -1 -1 -1
2 1 -1 -1 -1 -1 -1 -1 -1 -1
-1 2 -1 -1 2 -1 2 -1 -1 -1 -1
-1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 2
-1 -1 2 2 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 1 -1 1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
1 -1 1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 2 2 -1 -1 -1 1 -1 -1 -1
-1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1
1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 1 2 2 -1 -1 -1 -1
2 2 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 2 -1
-1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 1 -1 2 -1 1 -1 -1 1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 2 1 -1 -1 -1
1 -1 -1 -1 -1 2 -1 -1 2 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 2 1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 2 -1 2 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 2 -1 -1 -1 2

31
-1
-1 -1
-1 -1 -1
-1 -1 2 -1
-1 -1 1 -1 -1
-1 -1 -1 -1 -1 -1
-1 -1 -1 2 1 -1 -1
-1 1 -1 2 1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 2 2 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1
-1 1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1
-1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 2 -1
-1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 1
-1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 1 -1 -1 -1
-1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 1 -1
-1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 2
-1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 1 1 -1 -1 -1 -1 1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1
1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 1 2 -1 -1 2 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 2 -1 -1
-1 -1 -1 -1 2 -1 2 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1
1 -1 -1 -1 -1 -1 1 2 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1

30
-1
-1 -1
-1 -1 -1
-1 1 -1 -1
1 -1 -1 -1 -1
2 -1 1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1
-1 -1 1 -1 -1 -1 1 -1
-1 -1 -1 -1 -1 -1 1 1 -1
-1 -1 2 -1 -1 -1 -1 2 -1 -1
-1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1
-1 2 -1 -1 -1 -1 2 -1 -1 -1 -1 -1
-1 -1 2 -1 -1 -1 -1 -1 2 -1 -1 -1 -1
-1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 2 2 -1
-1 -1 -1 -1 -1 -1 2 -1 -1 -1 2 -1 -1 1 -1 -1
2 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 -1 1 -1 -1 -1 2 -1 -1 -1 1 -1 -1 -1 2 -1
-1 -1 2 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 2 2 -1 1 -1 1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1
-1 -1 1 -1 -1 -1 -1 -1 -1 2 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 2
-1 -1 -1 -1 -1 -1 1 2 2 -1 -1 -1 -1 -1 -1 2 -1 1 -1 -1 -1 1
-1 -1 -1 -1 -1 -1 2 2 1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 2 -1 2 -1
-1 2 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1
-1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
-1 -1 -1 1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 2 1 -1 -1 -1 -1 -1 -1 -1 -1 -1
1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1
-1 -1 -1 2 -1 1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 1 -1 -1 1 -1 -1 -1
-1 -1 -1 -1 -1 2 -1 -1 -1 -1 -1 -1 -1 -1 -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 2 -1 -1 -1
*/

/*
12.0
8.5
1.0
4.0 not 3.5
5.0 not 4.5
4.0 not 3.5
*/

/*
4
2
7 -1
5 -1 5
*/

/*

*/

#include <bits/stdc++.h>

using namespace std;

#define ll long long int

#define MAX_V 55

ll INF = 1e11;

int n;
ll graph[MAX_V][MAX_V], dist[MAX_V][MAX_V];
set<int> edge[MAX_V][MAX_V];

void clean_graph() {
  for(int i = 0; i < MAX_V; i++) {
    for(int j = 0; j < MAX_V; j++) {
      graph[i][j] = -1;
      dist[i][j] = INF;
      edge[i][j].clear();
    }
  }
}

void bfs(int index) {
  dist[index][index] = 0;
  priority_queue<pair<ll, int> >q;
  q.push(make_pair(0, index));

  while(!q.empty()) {
    
    pair<ll, int> f = q.top(); q.pop();
    ll d = f.first * -1;
    int par = f.second;
    
    for(int i = 1; i <= n; i++) {
      if(graph[par][i] != -1) {
        if(d + graph[par][i] <= dist[index][i]) {
          
          if(d + graph[par][i] < dist[index][i]) edge[index][i].clear();
          dist[index][i] = d + graph[par][i];
          q.push(make_pair(dist[index][i] * -1, i));


          if(par != index) {
            for(auto j : edge[index][par]) {
              edge[index][i].insert(j);
            }
          }
          else edge[index][i].insert(i); 
        }
      }
    }  
  }
  /*
  printf("bfs %d\n", index);
  for(int i = 1; i <= n; i++) {
    printf("%d, dist %lld\n", i, dist[index][i]);
    printf("edges: ");
    for(auto j : edge[index][i]) {
      printf("%d ", j);
    }

  printf("\n");  
  }*/
}

double get_ans(int index) {
  ll mx = 0;
  vector<int> e;

  for(int i = 1; i <= n; i++) {
    if(i != index && dist[index][i] > mx) {
      mx = dist[index][i];
    }
  }

  for(int i = 1; i <= n; i++) {
    if(i != index && dist[index][i] == mx) {
      for(auto j : edge[index][i]) {      
        e.push_back(j);
      }
    }
  }

  set<int> nodes[e.size()];
  for(int i = 0; i < e.size(); i++) {
    for(int j = 1; j <= n; j++) {
      for(auto k : edge[index][j]) {
        if(k == e[i] && dist[index][j] == mx)
          nodes[i].insert(j);
      }
    }

  }
  
  double res = INF;
  for(int i = 0; i < e.size(); i++) {
    ll mx2 = 0;
    for(int j = 1; j <= n; j++) {
      
      bool found = false;
      for(auto k : nodes[i]) {
        if(k == j) { found = true; break; } 
      }

      if(found) continue;
      
      if(j != index && dist[index][j] > mx2) {
        for(auto k : edge[index][j]) {      
         if(k != e[i]) {
            mx2 = dist[index][j];
         }
        }
      }
    }

    if (mx2 > mx) {
      ll aux = mx;
      mx = mx2;
      mx2 = aux;
    }
   // printf("%lld %lld\n", mx, mx2);
    double sol = 0;
    if((mx-mx2)/2.0 > graph[index][e[i]]) sol = mx;
    else sol = mx - (mx-mx2)/2.0;
    res = min(res, sol);
  }
  
  //printf("case %d: %.6f\n", index, res);
  //if(mx2 == 0) return mx;
  return res;
}


int main() {

  int t;
  scanf("%d", &t);
  for(int i = 1; i <= t; i++) {
    clean_graph();
    scanf("%d", &n);
    
    ll x;
    for(int j = 2; j <= n; j++) {
      for(int k = 1; k < j; k++) {
        scanf("%lld", &x);
        graph[j][k] = x;
        graph[k][j] = x;
      }
    }
    
    if(n == 2) {
      printf("Case #%d: %.6f\n", i, (graph[2][1]/2.0));
      continue;
    }
  
    for(int j = 1; j <= n; j++) bfs(j);
    
    double ans = INF;  
    for(int j = 1; j <= n; j++) ans = min(ans, get_ans(j));   
    
    printf("Case #%d: %.6f\n", i, ans);
  }


  return 0;
}
